-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelRustRegex where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsRustRegex

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transName :: AbsRustRegex.Name -> Result
transName x = case x of
  AbsRustRegex.Name string -> failure x

transRustRegexGrammar :: AbsRustRegex.RustRegexGrammar -> Result
transRustRegexGrammar x = case x of
  AbsRustRegex.Class class_ -> failure x
  AbsRustRegex.Alt class_1 class_2 -> failure x

transClass :: AbsRustRegex.Class -> Result
transClass x = case x of
  AbsRustRegex.Char char -> failure x
  AbsRustRegex.Seq classs -> failure x
  AbsRustRegex.Except classs -> failure x
  AbsRustRegex.Range char1 char2 -> failure x
  AbsRustRegex.Ascii -> failure x
  AbsRustRegex.NotAscii -> failure x
  AbsRustRegex.Intersect class_1 class_2 -> failure x
  AbsRustRegex.Subtract class_1 class_2 -> failure x
  AbsRustRegex.SymmetricDiff class_1 class_2 -> failure x
  AbsRustRegex.Escape char -> failure x
  AbsRustRegex.Nest class_ -> failure x

transCharacter :: AbsRustRegex.Character -> Result
transCharacter x = case x of
  AbsRustRegex.AnyExceptNewline -> failure x
  AbsRustRegex.Digit -> failure x
  AbsRustRegex.NotDigit -> failure x
  AbsRustRegex.UnicodeLetter -> failure x
  AbsRustRegex.NotUnicodeLetter -> failure x
  AbsRustRegex.LetterClass name -> failure x
  AbsRustRegex.NotLetterClass name -> failure x
