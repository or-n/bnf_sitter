-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language RustRegex.

module AbsRustRegex where

import Prelude (Char, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data RustRegexGrammar = Class Class | Alt Class Class
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Class
    = Char Char
    | Seq [Class]
    | Except [Class]
    | Range Char Char
    | Ascii
    | NotAscii
    | Intersect Class Class
    | Subtract Class Class
    | SymmetricDiff Class Class
    | Escape Char
    | Nest Class
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Character
    = AnyExceptNewline
    | Digit
    | NotDigit
    | UnicodeLetter
    | NotUnicodeLetter
    | LetterClass Name
    | NotLetterClass Name
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Repeat
    = Many
    | Some
    | Optional
    | ManyLazy
    | SomeLazy
    | OptionalLazy
    | LeastMost Number Number
    | Least Number
    | Exactly Number
    | LeastMostLazy Number Number
    | LeastLazy Number
    | ExactlyLazy Number
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Empty
    = Start
    | End
    | OnlyStart
    | OnlyEnd
    | UnicodeBoundary
    | NotUnicodeBoundary
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Number = Number String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Name = Name String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

