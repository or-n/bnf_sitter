comment "//" ;
comment "/*" "*/" ;

Grammar. Grammar ::=
	Preamble "module" "." "exports" "=" "grammar" "(" "{" GrammarBody "}" ")" ";" ;

Preamble. Preamble ::= [ConstDecl] ;

ConstDecl. ConstDecl ::= "const" Id "=" String ;
terminator ConstDecl ";" ;

GrammarBody. GrammarBody ::= Name "," Rules "," ;

Name. Name ::= "name" ":" String ;
Rules. Rules ::= "rules" ":" "{" [Rule] "}" ;

Rule. Rule ::= Id ":" "$" "=>" Rule ;
terminator Rule "," ;

Choice. Rule ::= "choice" "(" [Rule] ")" ;
Seq. Rule ::= "seq" "(" [Rule] ")" ;
Repeat. Rule ::= "repeat" "(" Rule ")" ;
Repeat1. Rule ::= "repeat1" "(" Rule ")" ;
Optional. Rule ::= "optional" "(" Rule ")" ;
Symbol. Rule ::= "$" "." Id ;
Const. Rule ::= Id ;
Literal. Rule ::= String ;
Regex. Rule ::= RegEx ;
separator Rule "," ;

token Id ((letter | '_') (letter | digit | '_')*) ;
token RegEx ('/' (char - '/')* '/') ;
