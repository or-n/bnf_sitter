-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLBNF where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLBNF

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLBNF.Ident -> Result
transIdent x = case x of
  AbsLBNF.Ident string -> failure x

transLBNFGrammar :: AbsLBNF.LBNFGrammar -> Result
transLBNFGrammar x = case x of
  AbsLBNF.MkGrammar defs -> failure x

transDef :: AbsLBNF.Def -> Result
transDef x = case x of
  AbsLBNF.Rule label cat items -> failure x
  AbsLBNF.Comment string -> failure x
  AbsLBNF.Comments string1 string2 -> failure x
  AbsLBNF.Internal label cat items -> failure x
  AbsLBNF.Token ident reg -> failure x
  AbsLBNF.PosToken ident reg -> failure x
  AbsLBNF.Entryp idents -> failure x
  AbsLBNF.Separator minimumsize cat string -> failure x
  AbsLBNF.Terminator minimumsize cat string -> failure x
  AbsLBNF.Coercions ident integer -> failure x
  AbsLBNF.Rules ident rhss -> failure x
  AbsLBNF.Layout strings -> failure x
  AbsLBNF.LayoutStop strings -> failure x
  AbsLBNF.LayoutTop -> failure x

transItem :: AbsLBNF.Item -> Result
transItem x = case x of
  AbsLBNF.Terminal string -> failure x
  AbsLBNF.NTerminal cat -> failure x

transCat :: AbsLBNF.Cat -> Result
transCat x = case x of
  AbsLBNF.ListCat cat -> failure x
  AbsLBNF.IdCat ident -> failure x

transLabel :: AbsLBNF.Label -> Result
transLabel x = case x of
  AbsLBNF.LabNoP labelid -> failure x
  AbsLBNF.LabP labelid profitems -> failure x
  AbsLBNF.LabPF labelid1 labelid2 profitems -> failure x
  AbsLBNF.LabF labelid1 labelid2 -> failure x

transLabelId :: AbsLBNF.LabelId -> Result
transLabelId x = case x of
  AbsLBNF.Id ident -> failure x
  AbsLBNF.Wild -> failure x
  AbsLBNF.ListE -> failure x
  AbsLBNF.ListCons -> failure x
  AbsLBNF.ListOne -> failure x

transProfItem :: AbsLBNF.ProfItem -> Result
transProfItem x = case x of
  AbsLBNF.ProfIt intlists integers -> failure x

transIntList :: AbsLBNF.IntList -> Result
transIntList x = case x of
  AbsLBNF.Ints integers -> failure x

transRHS :: AbsLBNF.RHS -> Result
transRHS x = case x of
  AbsLBNF.MkRHS items -> failure x

transMinimumSize :: AbsLBNF.MinimumSize -> Result
transMinimumSize x = case x of
  AbsLBNF.MNonempty -> failure x
  AbsLBNF.MEmpty -> failure x

transReg :: AbsLBNF.Reg -> Result
transReg x = case x of
  AbsLBNF.RSeq reg1 reg2 -> failure x
  AbsLBNF.RAlt reg1 reg2 -> failure x
  AbsLBNF.RMinus reg1 reg2 -> failure x
  AbsLBNF.RStar reg -> failure x
  AbsLBNF.RPlus reg -> failure x
  AbsLBNF.ROpt reg -> failure x
  AbsLBNF.REps -> failure x
  AbsLBNF.RChar char -> failure x
  AbsLBNF.RAlts string -> failure x
  AbsLBNF.RSeqs string -> failure x
  AbsLBNF.RDigit -> failure x
  AbsLBNF.RLetter -> failure x
  AbsLBNF.RUpper -> failure x
  AbsLBNF.RLower -> failure x
  AbsLBNF.RAny -> failure x
