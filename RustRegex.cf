
ConcatGrammar. Grammar ::= Concat ;
Class. Grammar ::= "[" Class "]" Repeat ;
Alt. Grammar ::= Grammar "|" Grammar ;
Group. Grammar ::= "(" Grammar ")" Repeat ;

ConcatClass. Class ::= Concat ;
Seq. Class ::= [Class] ;
Except. Class ::= "^" [Class] ;
Range. Class ::= Char "-" Char ;
Ascii. Class ::= "[:alpha:]" ;
NotAscii. Class ::= "[:^alpha:]" ;
Intersect. Class ::= Class "&&" Class ;
Subtract. Class ::= Class "--" Class ;
SymmetricDiff. Class ::= Class "~~" Class ;
Nest. Class ::= "[" Class "]" ;
separator Class "" ;

Char. Concat ::= MyChar ;
Escape. Concat ::= "\\" MyChar ;
Character. Concat ::= Character ;
separator Concat "" ;

AnyExceptNewline. Character ::= "." ;
Digit. Character ::= "\\d" ;
NotDigit. Character ::= "\\D" ;
UnicodeLetter. Character ::= "\\pN" ;
NotUnicodeLetter. Character ::= "\\PN" ;
LetterClass. Character ::= "\\p" "{" Name "}" ;
NotLetterClass. Character ::= "\\P" "{" Name "}" ;

Many. Repeat ::= "*" ;
Some. Repeat ::= "+" ;
Optional. Repeat ::= "?" ;
ManyLazy. Repeat ::= "*?" ;
SomeLazy. Repeat ::= "+?" ;
OptionalLazy. Repeat ::= "??" ;
LeastMost. Repeat ::= "{" Number "," Number "}" ;
Least. Repeat ::= "{" Number "," "}" ;
Exactly. Repeat ::= "{" Number "}" ;
LeastMostLazy. Repeat ::= "{" Number "," Number "}" "?" ;
LeastLazy. Repeat ::= "{" Number "," "}" "?" ;
ExactlyLazy. Repeat ::= "{" Number "}" "?" ;
No. Repeat ::= ;

Start. Empty ::= "^" ;
End. Empty ::= "$" ;
OnlyStart. Empty ::= "A" ;
OnlyEnd. Empty ::= "z" ;
UnicodeBoundary. Empty ::= "b" ;
NotUnicodeBoundary. Empty ::= "B" ;

Quote. MyChar ::= "\"" ;
EscapeChar. MyChar ::= "\\" ;
Other. MyChar ::= Char ;

token Number digit+ ;
token Name letter+ ;
